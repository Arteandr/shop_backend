basePath: /api/v1
definitions:
  models.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  models.Color:
    properties:
      hex:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    required:
    - hex
    - name
    - price
    type: object
  models.Item:
    properties:
      categoryId:
        type: integer
      colors:
        items:
          $ref: '#/definitions/models.Color'
        type: array
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      sku:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
    type: object
  models.Tag:
    properties:
      id:
        type: integer
      itemId:
        type: integer
      name:
        type: string
    type: object
  models.Tokens:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  v1.CreateCategoryResult:
    properties:
      categoryId:
        type: integer
    type: object
  v1.CreateColorResult:
    properties:
      colorId:
        type: integer
    type: object
  v1.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  v1.SignUpResponse:
    properties:
      id:
        type: integer
    type: object
  v1.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
  v1.authInput:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 64
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  v1.createItemInput:
    properties:
      categoryId:
        type: integer
      colors:
        items:
          type: integer
        type: array
      description:
        type: string
      name:
        type: string
      sku:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - categoryId
    - colors
    - description
    - name
    - sku
    type: object
host: localhost:8000
info:
  contact: {}
  description: API server
  title: FinlandShop API
  version: "0.1"
paths:
  /categories/create:
    post:
      consumes:
      - application/json
      description: create a new category
      parameters:
      - description: input body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CreateCategoryResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Create a new category
      tags:
      - categories-actions
  /colors/create:
    post:
      consumes:
      - application/json
      description: create a new color
      parameters:
      - description: input body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Color'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CreateColorResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Create a new color
      tags:
      - colors-actions
  /items/{id}:
    get:
      consumes:
      - application/json
      description: get item by id
      parameters:
      - description: item id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get item by ID
      tags:
      - items-actions
  /items/create:
    post:
      consumes:
      - application/json
      description: create a new item
      parameters:
      - description: input body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.createItemInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Create a new item
      tags:
      - items-actions
  /items/sku/{sku}:
    get:
      consumes:
      - application/json
      description: get item by sku
      parameters:
      - description: item sku
        in: path
        name: sku
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get item by SKU
      tags:
      - items-actions
  /users/auth/sign-in:
    post:
      consumes:
      - application/json
      description: sign-in user to account
      parameters:
      - description: email and password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.authInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Login
      tags:
      - users-auth
  /users/auth/sign-up:
    post:
      consumes:
      - application/json
      description: sign-up user
      parameters:
      - description: email and password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.authInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Register
      tags:
      - users-auth
  /users/me:
    get:
      consumes:
      - application/json
      description: get current user by auth token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - UsersAuth: []
      summary: Get current user
      tags:
      - users-actions
securityDefinitions:
  UsersAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
